#include <iostream>
#include <cstdio>
#include <algorithm>

using namespace std;

/**
 * Proste odwzorowanie: numer Å›ciany -> kolor.
 * BTW: wolÄ™ British English wiÄ™c colOUr a nie colOr ;)
 * @param i Numer koloru.
 * @return Kod ASCII zmiany ustawieÅ„ konsoli.
 * @see http://ascii-table.com/ansi-escape-sequences.php
 */
int getColour(int i) {
	switch(i) {
		case 0: return 41;
		case 1: return 44;
		case 2: return 47;
		case 3: return 42;
		case 4: return 43;
		case 5: return 45;
		default: return 0;
	}
}

/**
 * Ustawia kolor c na wyjÅ›ciu out
 * @param out WyjÅ›cie.
 * @param c Kolor.
 * @see http://ascii-table.com/ansi-escape-sequences.php
 */
void setColour(ostream &out, int c=0) {
	out << "[" << c << "m";
}

/**
 * Klasa opisujÄ…ca kostkÄ™.
 *
 * W tej klasie trzymam siÄ™ poniÅ¼szej notacji
 *   - i - numer Å›ciany
 *   - j - wiersz
 *   - k - kolumna
 */
class matrixCube {
	int matrix[6][4][4];	/**< Macierz ***int opisujÄ…ca ustawienie kostki */
	int front;	/**< Numer Å›ciany, na ktÃ³rÄ… patrzymy */
	int head;	/**< Numer Å›ciany, ktÃ³ra jest na gÃ³rze */
public:
	/**
	 * DomyÅ›lny konstruktor.
	 *
	 * Ustawia (uÅ‚oÅ¼onÄ…) kostkÄ™ w poÅ‚oÅ¼eniu domyÅ›lnym, tj. biaÅ‚ym do przodu, czerwonym do gÃ³ry
	 */
	matrixCube() : front(2), head(0) {
		int i,j,k;
		for(i=0; i<6; ++i)
			for(j=0;j<4;++j)
				for(k=0;k<4;++k)
					matrix[i][j][k] = i;
	}

	/**
	 * Modyfikacja ukÅ‚adu kostki.
	 *
	 * Obraca danÄ… Å›cianÄ™ rFace rTimes razy, obracajÄ…c jej rDepth poziomÃ³w.
	 * @param rFace Numer Å›ciany, wokÃ³Å‚ ktÃ³rej obracamy.
	 * @param rDepth IloÅ›Ä‡ poziomÃ³w, ktÃ³re obracamy.
	 * @param rTimes IloÅ›Ä‡ obrotÃ³w. Obroty zgodnie ze wskazÃ³wkami zegara. By obrÃ³ciÄ‡ w prawo podajemy rTimes=-1.
	 */
	void rotate(int rFace, int rDepth, int rTimes);
	friend ostream& operator<<(ostream&, matrixCube&);
};

int main() {
	matrixCube test;
	cout << "bla\n";
	cout << test;
	cout << "ble\n";
	cout << endl;
	test.rotate(2, 1, 1);
	cout << test;
	cout << "bli\n";
	cout << endl;
	return 0;
}

ostream& operator<<(ostream &out, matrixCube &m) {
	/*
	 *      0----+
	 *      |    |
	 *      |    |
	 *      |    |
	 *      |    |
	 * 1----2----3----4----+
	 * |    |    |    |    |
	 * |    |    |    |    |
	 * |    |    |    |    |
	 * |    |    |    |    |
	 * +----5----+----+----+
	 *      |    |
	 *      |    |
	 *      |    |
	 *      |    |
	 *      +----+
	 */
	int i,j,k;
	setColour(out); // default
	out << "     +----+\n";
	for(j=0; j<4; ++j) {
		out << "     |";
		for(k=0; k<4; ++k) {
			setColour(out, getColour(m.matrix[0][j][k]));
			out << m.matrix[0][j][k];
		}
		out << "[0m"; // default
		out << "|\n";
	}
	out << "+----+----+----+----+\n";
	for(j=0; j<4;++j) {
		for(i=1; i<5; ++i) {
			out << "|";
			for(k=0; k<4; ++k) {
				setColour(out, getColour(m.matrix[i][j][k]));
				out << m.matrix[i][j][k];
			}
			setColour(out); // default
		}
		out << "|\n";
	}
	setColour(out); // default
	out << "+----+----+----+----+\n";
	for(j=0; j<4; ++j) {
		out << "     |";
		for(k=0; k<4; ++k) {
			setColour(out, getColour(m.matrix[5][j][k]));
			out << m.matrix[5][j][k];
		}
		setColour(out); // default
		out << "|\n";
	}
	out << "     +----+\n";
}

void matrixCube::rotate(int rFace, int rDepth, int rTimes) {
	/**
	 * Tablica obrotÃ³w.
	 * Zawiera informacje o przejÅ›ciu krawÄ™dzi na krawÄ™dÅº przy danym obrocie.
	 *
	 * PrzykÅ‚adowo:
	 * ObrÃ³t wzglÄ™dem Å›ciany 2 oznacza, Å¼e czÄ™Å›Ä‡ Å›ciany 0 przechodzi w 1, czÄ™Å›Ä‡ 1
	 * w 5, czÄ™Å›Ä‡ 5 w 3, oraz czÄ™Å›Ä‡ 3 w 0.
	 */
	int rots[][4] = {
		{4,1,2,3},
		{0,4,5,2},
		{0,1,5,3},
		{0,2,5,4},
		{0,3,5,1},
		{2,1,4,3}};
	int nMatrix[6][4][4];
	int *nMatrixH = &nMatrix[0][0][0];
	int *matrixH = &matrix[0][0][0];
	int i,j,k;
	int cnt;

	copy((int***)(matrix), (int***)(matrix)+sizeof((int***)(matrix)), (int***)(nMatrix));
	rTimes %= 4;

	// obrÃ³t przedniej Å›ciany
	for(cnt = 0; cnt<rTimes; ++cnt)
		for(j=0; j<4; ++j)
			for(k=0; k<4; ++k)
				nMatrix[rFace][3-k][j] = matrix[rFace][j][k];

	copy((int***)(nMatrix), (int***)(nMatrix)+sizeof((int***)(nMatrix)), (int***)(matrix));
}

